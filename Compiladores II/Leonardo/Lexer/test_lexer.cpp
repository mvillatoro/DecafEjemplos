#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN

#include "lexer.h"
#include "doctest.h"
#include <fstream>

TEST_CASE("Test String-Char"){
    string filename = "../test_lexer/Files/String-Char Test.txt";
    ifstream file(filename);
    REQUIRE(file.is_open());

    Lexer lex(file);
    Token tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "x");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::StringConst);
    CHECK(lex.getText() == "Hola Mundo\nAdios\tMundo\'\\\"\r");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "y");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::StringErr);
    CHECK(lex.getText() == "\\x");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "var_1_2_3");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::StringConst);
    CHECK(lex.getText() == "");
    tok = lex.getNextToken();
    CHECK(tok == Token::StringErr);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "_123");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::CharErr);
    CHECK(lex.getText() == "ab");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "_x_2");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::CharErr);
    CHECK(lex.getText() == "\\");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Eof);
}

TEST_CASE("Nums Test"){
    string filename = "../test_lexer/Files/Nums Test.txt";
    ifstream file(filename);
    REQUIRE(file.is_open());

    Lexer lex(file);

    Token tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "0xFFfa");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "sd1289");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "56");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "_hola");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "0x123b");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "reak");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "0xf00d32");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Eof);
}

TEST_CASE("Keyword Test"){
    string filename = "../test_lexer/Files/KeyWord Test.txt";
    ifstream file(filename);
    REQUIRE(file.is_open());

    Lexer lex(file);

    Token tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Class);
    CHECK(lex.getText() == "class");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "ABC");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_For);
    CHECK(lex.getText() == "for");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Int);
    CHECK(lex.getText() == "int");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "i");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "0x0");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "i");
    tok = lex.getNextToken();
    CHECK(tok == Token::CondLT);
    CHECK(lex.getText() == "<");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "100");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "i");
    tok = lex.getNextToken();
    cout << "Antes de la cagada" << endl;
    CHECK(tok == Token::OpAssign);
    CHECK(lex.getText() == "=");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "i");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpAdd);
    CHECK(lex.getText() == "+");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "1");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_While);
    CHECK(lex.getText() == "while");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_True);
    CHECK(lex.getText() == "true");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_If);
    CHECK(lex.getText() == "if");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "x");
    tok = lex.getNextToken();
    CHECK(tok == Token::CondGEq);
    CHECK(lex.getText() == ">=");
    tok = lex.getNextToken();
    CHECK(tok == Token::Number);
    CHECK(lex.getText() == "10");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Break);
    CHECK(lex.getText() == "break");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Else);
    CHECK(lex.getText() == "else");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Continue);
    CHECK(lex.getText() == "continue");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Bool);
    CHECK(lex.getText() == "bool");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "y");
    tok = lex.getNextToken();
    CHECK(tok == Token::Semicolon);
    CHECK(lex.getText() == ";");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_If);
    CHECK(lex.getText() == "if");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpNot);
    CHECK(lex.getText() == "!");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "y");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Else);
    CHECK(lex.getText() == "else");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_If);
    CHECK(lex.getText() == "if");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "z");
    tok = lex.getNextToken();
    CHECK(tok == Token::CondEqual);
    CHECK(lex.getText() == "==");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_False);
    CHECK(lex.getText() == "false");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::Kw_Void);
    CHECK(lex.getText() == "void");
    tok = lex.getNextToken();
    CHECK(tok == Token::Ident);
    CHECK(lex.getText() == "func");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenPar);
    CHECK(lex.getText() == "(");
    tok = lex.getNextToken();
    CHECK(tok == Token::ClosePar);
    CHECK(lex.getText() == ")");
    tok = lex.getNextToken();
    CHECK(tok == Token::OpenBrace);
    CHECK(lex.getText() == "{");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::CloseBrace);
    CHECK(lex.getText() == "}");
    tok = lex.getNextToken();
    CHECK(tok == Token::Eof);
}